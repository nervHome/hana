# ==========================================
# Docker Compose for NestJS + Prisma + PostgreSQL
# 支持开发、测试、生产多环境配置
# ==========================================

x-app-environment: &app-environment
  NODE_ENV: ${NODE_ENV:-production}
  DATABASE_URL: postgresql://epg_user:epg_password@postgres:5432/epg_db
  JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
  PORT: 4000

x-app-healthcheck: &app-healthcheck
  test: ['CMD', 'node', 'dist/health-check.js']
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: epg-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: epg_db
      POSTGRES_USER: epg_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-epg_password}
    # 开发环境：绑定到 localhost，生产环境：仅内部访问
    ports:
      - '${POSTGRES_PORT:-127.0.0.1:5432}:5432'
    expose:
      - '5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - epg-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U epg_user -d epg_db']
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS 应用
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: epg-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      <<: *app-environment
    # 开发环境：localhost绑定，生产环境：内部访问
    ports:
      - '${APP_PORT:-127.0.0.1:4000}:4000'
    expose:
      - '4000'
    networks:
      - epg-network
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    healthcheck:
      <<: *app-healthcheck
    # 生产环境资源限制
    deploy:
      resources:
        limits:
          cpus: '${CPU_LIMIT:-1.0}'
          memory: ${MEMORY_LIMIT:-1G}
        reservations:
          cpus: '${CPU_RESERVATION:-0.5}'
          memory: ${MEMORY_RESERVATION:-512M}
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Nginx 反向代理 (可选，通过环境变量控制)
  nginx:
    image: nginx:alpine
    container_name: epg-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - '${NGINX_HTTP_PORT:-80}:80'
      - '${NGINX_HTTPS_PORT:-443}:443'
    volumes:
      - ./nginx-internal.conf:/etc/nginx/nginx.conf:ro
      - ${SSL_CERT_PATH:-./ssl}:/etc/nginx/ssl:ro
    networks:
      - epg-network
    profiles:
      - nginx
      - production

# 网络配置
networks:
  epg-network:
    driver: bridge
    # 生产环境可启用内部网络隔离
    internal: ${NETWORK_INTERNAL:-false}
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}

# 数据卷
volumes:
  postgres_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
